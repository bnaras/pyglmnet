library(glmnet)
library(testthat)
q()
n
q()
n
d <- readRDS("test1.RDS")
str(d)
library(reticulate)
install.packages("reticulate")
library(reticulate)
help.start()
reticulate::install_python()
9)
q()
n
library(reticulate)
install_miniconda()
help.start()
conda_install(envname="r-reticulate", c("scipy"))
clear
import(numpy)
np = import("numpy")
q()
n
library(reticulate)
help.start()
library(reticulate)
main <- reticulate::import_main()
q()
n
l <- readRDS("test1.RDS")
str(l)
library(Matrix)
m <- matrix(1:20, nrow = 5)
m
m[2:4, 2:4] <- 0
m
m <- Matrix(m)
m
m <- matrix(1:20, nrow = 5)
m <- matrix(seq(1.0, 20.0), nrow = 5)
m
m <- Matrix(m)
m
m[2:4, 2:4] <- 0
m
m <- as(m, "dgCMatrix")
m
pickle(m, "m.pickle")
q()
n
d <- readRDS("test1.RDS")
str(d)
attributes(d$target)
str(d)
str(d)
str(d$target)
d$target$fit$call
str(d$target)
attributes(d$target$fit)
str(d$target)
d
pickle(d, "test1.pickle")
q()
n
q()
n
library(glmnet)
library(testthat)
q((((((((()
q()
n
source("test_elnet.R")
q()
b
n
debugonce(compare_fits)
n
n
count
n
n
n
n
str(oldfit)
oldfit$call
Q
Q
q()
n
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
d <- readRDS("test_001.RDS")
args <- d$newfit$args
head(args$x)
tail(args$x)
x[200,]
q()
n
source("test_elnet.R")
d <- readRDS("test_001.RDS")
args <- d$newfit$args
tail(args$x)
args$x[200:]
args$x[200, ]
str(d$newfit)
q()
n
source("test_elnet.R")
d <- readRDS("test_001.RDS")
str(d)
q()
n
source("test_elnet.R")
d <- readRDS("test_001.RDS")
d
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
debug(compare_fits)
q()
n
debug(compare_fits)
n
str(oldfit)
str(newfit)
str(out)
Q
q()
n
source("test_elnet.R")
n
n
str(wls_fit1)
q()
Q
q()
n
source("test_elnet.R")
Q
q()
n
source("test_elnet.R")
d <- readRDS("test_001.RDS")
str(d)
m <- do.call(glmnet:::elnet.fit, d$args)
 m <- do.call(glmnet:::spwls_exp, d$args)
 m <- do.call(glmnet:::wls_exp, d$args)
str(m)
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
newfit$args
n
n
str(result)
result$xv
result$aint
result$g
result$a
Q
q()
n
d <- readRDS("test1.RDS")
d <- readRDS("test_001.RDS")
names(d)
str(d$args)
args$a
d$args$a
pickle(d$args$a, "foo.pickle")
pickle(d$args, "foo.pickle")
str(d)
d$args$a
d$result$a
d$result$almc
d$result$r
q()
n
?utils::deepcopy
library(utils)
install.packages("R.utils")
q()
n
library(R.utils)
lst <- list(a = 1:5, b = matrix(1:6, ncol=2), c = list(x = "Hello", y = "World"))

lst_copy <- deepcopy(lst)

q()
n
?serialize
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
d = readRDS("test_001.RDS")
str(d)
d$args
d$result
m <- do.call(glmnet:::wls_exp, d$args)
m
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
source("test_elnet.R")
q()
n
d <- readRDS("test_001.RDS)
d <- readRDS("test_001.RDS")
d$sparse
d$args
d$result
q()
n
source("test_elnet.R")
q()
n
q
q()
n
d$result
res <- do.call(glmnet:::wls_exp, d$args)
res
res <- do.call(glmnet:::spwls_exp, d$args)
res <- do.call(glmnet:::wls_exp, d$args)
res
res <- do.call(glmnet:::wls_exp, d$args)
res
res
identical(res, res1)
res$aint
res1$aint
res2$aint
q()
n
identical(res, res1)
identical(res, res2)
d$sparse
identical(res, res1)
identical(res, res2)
q()
n
str(d)
identical(res, d$result)
res$aint
res$g
d$res$g
d$result$g
d$result$g
str(d)
q()
n
source("get_result.R")
q()
n
d <- get_result(4)
m <- do.call(glmnet:::wls_exp, d$args)
str(m)
str(d$result)
d$sparse
d$result$g
m$g
m <- do.call(glmnet:::wls_exp, deep_copy(d$args))
m$g
q()
n
args <- d$args
m <- do.call(glmnet::wls_exp, args)
m <- do.call(glmnet:::wls_exp, args)
m
str(m)
str(d$result)
identical(m, d$result)
identical(m$almc, d$result$almc)
tc('r')
cbind(m$r, d$result$r)
sum(abs(m$r-d$result$r))
d$sparse
m <- do.call(glmnet:::spwls_exp, d$args)
str(m)
str(d$result)
identical(m, d$result)
q()
n
